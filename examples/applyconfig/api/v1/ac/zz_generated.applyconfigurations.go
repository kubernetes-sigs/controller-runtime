//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package v1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
	apiv1 "sigs.k8s.io/controller-runtime/examples/applyconfig/api/v1"
)

// FooApplyConfiguration represents a declarative configuration of the Foo type for use
// with apply.
type FooApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	NonNullableField                     *string `json:"nonNullableField,omitempty"`
	NullableField                        *string `json:"nullableField,omitempty"`
}

// WithNonNullableField sets the NonNullableField field in the declarative configuration to the given value
func (b *FooApplyConfiguration) WithNonNullableField(value string) *FooApplyConfiguration {
	b.NonNullableField = &value
	return b
}

// WithNullableField sets the NullableField field in the declarative configuration to the given value
func (b *FooApplyConfiguration) WithNullableField(value string) *FooApplyConfiguration {
	b.NullableField = &value
	return b
}

// FooApplyConfiguration represents a declarative configuration of the Foo type for use
// with apply.
func Foo() *FooApplyConfiguration {
	ac := &FooApplyConfiguration{}
	ac.WithKind("Foo")
	ac.WithAPIVersion("applytest.kubebuilder.io/v1")
	return ac
}
func (ac *FooApplyConfiguration) GetReferenceType() runtime.Object {
	return &apiv1.Foo{}
}
func (ac *FooApplyConfiguration) WithKind(value string) *FooApplyConfiguration {
	ac.Kind = &value
	return ac
}
func (ac *FooApplyConfiguration) WithAPIVersion(value string) *FooApplyConfiguration {
	ac.APIVersion = &value
	return ac
}
func (ac *FooApplyConfiguration) ensureObjectMetaApplyConfigurationExists() {
	if ac.ObjectMetaApplyConfiguration == nil {
		ac.ObjectMetaApplyConfiguration = &metav1.ObjectMetaApplyConfiguration{}
	}
}
func (ac *FooApplyConfiguration) WithName(value string) *FooApplyConfiguration {
	ac.ensureObjectMetaApplyConfigurationExists()
	ac.Name = &value
	return ac
}
func (ac *FooApplyConfiguration) WithNamespace(value string) *FooApplyConfiguration {
	ac.Namespace = &value
	return ac
}
func (ac *FooApplyConfiguration) GetName() string {
	ac.ensureObjectMetaApplyConfigurationExists()
	return *ac.Name
}
func (ac *FooApplyConfiguration) GetNamespace() string {
	ac.ensureObjectMetaApplyConfigurationExists()
	return *ac.Namespace
}
